/*jshint esversion: 6 */
import React from 'react';
import ReactDOM from 'react-dom';
import $ from 'jquery';
import CommentList from './comment_list';
import CommentForm from './comment_form';

const COMMENTS_URL = '/api/comments';

let CommentBox = React.createClass({
  getInitialState: function(){
    return { data: [] }
  },

  loadComments: function(){
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  handleCommentSubmit: function(comment) {
    let comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    let newComments = comments.concat([comment]);
    this.setState({data: newComments});

    // post the comment
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments}); // for optimistic updates
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  componentDidMount: function() {
    this.loadComments();
    setInterval(this.loadComments, this.props.pollInterval);
  },

  render: function() {
    return (
      <div className="comment-box">
        <h1>Comments</h1>
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
        <CommentList data={this.state.data} />
      </div>
    );
  }
});


export default function(){
  ReactDOM.render(
    <CommentBox url={COMMENTS_URL} pollInterval={5000} />,
    document.getElementById('root')
  );
}
